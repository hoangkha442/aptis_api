generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  user_id      Int           @id @default(autoincrement())
  user_name    String        @db.VarChar(50)
  password     String        @db.VarChar(255)
  full_name    String?       @db.VarChar(100)
  email        String        @unique(map: "email") @db.VarChar(100)
  phone_number String?       @db.VarChar(20)
  role         users_role?   @default(student)
  status       users_status? @default(active)
  create_at    DateTime?     @default(now()) @db.DateTime(0)
  last_day     DateTime?     @db.DateTime(0)
  courses      courses[]
}

model courses {
  course_id   Int     @id @default(autoincrement())
  course_name String? @db.VarChar(100)
  description String? @db.Text
  user_id     Int?
  users       users?  @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "courses_ibfk_1")

  @@index([user_id], map: "user_id")
}

model listening_test {
  listening_test_id    Int                    @id @default(autoincrement())
  key_test             String?                @db.VarChar(50)
  tittle               String?                @db.VarChar(100)
  description          String?                @db.Text
  duration             Int?
  listening_test_items listening_test_items[]
}

model listening_test_items {
  listening_test_items_id Int             @id @default(autoincrement())
  listening_test_id       Int?
  question_number         String?         @db.VarChar(100)
  tittle                  String?         @db.VarChar(100)
  description             String?         @db.Text
  content                 String?         @db.Text
  correct_answer          String?         @db.VarChar(60)
  options                 String?         @db.Text
  script                  String?         @db.Text
  topic                   String?         @db.VarChar(100)
  hidden_correct_aswer    Boolean?        @default(true)
  listening_test          listening_test? @relation(fields: [listening_test_id], references: [listening_test_id], onDelete: Cascade, onUpdate: NoAction, map: "listening_test_items_ibfk_1")

  @@index([listening_test_id], map: "listening_test_id")
}

model reading_part_1 {
  reading_part_1_id Int           @id @default(autoincrement())
  reading_test_id   Int?
  title             String?       @db.VarChar(100)
  description       String?       @db.Text
  content           String?       @db.Text
  correct_answer    String?       @db.VarChar(10)
  options           String?       @db.Text
  reading_test      reading_test? @relation(fields: [reading_test_id], references: [reading_test_id], onDelete: Cascade, onUpdate: NoAction, map: "reading_part_1_ibfk_1")

  @@index([reading_test_id], map: "reading_test_id")
}

model reading_part_2 {
  reading_part_2_id Int           @id @default(autoincrement())
  reading_test_id   Int?
  title             String?       @db.VarChar(100)
  name_of_test      String?       @db.VarChar(100)
  description       String?       @db.Text
  content           String?       @db.Text
  sort_order        Int?
  reading_test      reading_test? @relation(fields: [reading_test_id], references: [reading_test_id], onDelete: Cascade, onUpdate: NoAction, map: "reading_part_2_ibfk_1")

  @@index([reading_test_id], map: "reading_test_id")
}

model reading_part_3 {
  reading_part_3_id Int           @id @default(autoincrement())
  reading_test_id   Int?
  title             String?       @db.VarChar(100)
  name_of_test      String?       @db.VarChar(100)
  description       String?       @db.Text
  content           String?       @db.Text
  sort_order        Int?
  reading_test      reading_test? @relation(fields: [reading_test_id], references: [reading_test_id], onDelete: Cascade, onUpdate: NoAction, map: "reading_part_3_ibfk_1")

  @@index([reading_test_id], map: "reading_test_id")
}

model reading_part_4 {
  reading_part_4_id Int           @id @default(autoincrement())
  reading_test_id   Int?
  title             String?       @db.VarChar(100)
  description       String?       @db.Text
  paragraph_text    String?       @db.Text
  content           String?       @db.Text
  correct_answer    String?       @db.VarChar(10)
  options           String?       @db.Text
  reading_test      reading_test? @relation(fields: [reading_test_id], references: [reading_test_id], onDelete: Cascade, onUpdate: NoAction, map: "reading_part_4_ibfk_1")

  @@index([reading_test_id], map: "reading_test_id")
}

model reading_part_5 {
  reading_part_5_id    Int           @id @default(autoincrement())
  reading_test_id      Int?
  title                String?       @db.VarChar(100)
  name_of_test         String?       @db.VarChar(100)
  description          String?       @db.Text
  content              String?       @db.Text
  sort_order           Int?
  hidden_correct_aswer Boolean?      @default(true)
  reading_test         reading_test? @relation(fields: [reading_test_id], references: [reading_test_id], onDelete: Cascade, onUpdate: NoAction, map: "reading_part_5_ibfk_1")

  @@index([reading_test_id], map: "reading_test_id")
}

model reading_test {
  reading_test_id Int              @id @default(autoincrement())
  key_test        String?          @db.VarChar(50)
  tittle          String?          @db.VarChar(100)
  description     String?          @db.Text
  duration        Int?
  reading_part_1  reading_part_1[]
  reading_part_2  reading_part_2[]
  reading_part_3  reading_part_3[]
  reading_part_4  reading_part_4[]
  reading_part_5  reading_part_5[]
}

enum users_role {
  admin
  student
  lecturer
}

enum users_status {
  active
  inactive
}
