generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  user_id        Int              @id @default(autoincrement())
  user_name      String           @db.VarChar(50)
  password       String           @db.VarChar(255)
  full_name      String?          @db.VarChar(100)
  email          String           @unique(map: "email") @db.VarChar(100)
  phone_number   String?          @db.VarChar(20)
  role           users_role?      @default(student)
  status         users_status?    @default(active)
  create_at      DateTime?        @default(now()) @db.DateTime(0)
  last_day       DateTime?        @db.DateTime(0)
  course_members course_members[]
  user_sessions  user_sessions[]
}

model user_sessions {
  session_id String   @id @default(uuid())
  user_id    Int
  token      String   @unique
  ip_address String   @db.VarChar(255)
  device     String   @db.VarChar(255)
  created_at DateTime @default(now())
  expires_at DateTime
  user       users    @relation(fields: [user_id], references: [user_id])

  @@index([user_id])
}

model courses {
  course_id   Int              @id @default(autoincrement())
  course_name String?          @db.VarChar(100)
  description String?          @db.Text
  members     course_members[]
}

model course_members {
  id         Int        @id @default(autoincrement())
  user_id    Int
  course_id  Int
  role       users_role
  created_at DateTime   @default(now())
  course     courses    @relation(fields: [course_id], references: [course_id])
  user       users      @relation(fields: [user_id], references: [user_id])

  @@unique([user_id, course_id])
  @@index([course_id], map: "course_members_course_id_fkey")
}

model listening_test {
  listening_test_id    Int                    @id @default(autoincrement())
  key_test             String?                @db.VarChar(50)
  tittle               String?                @db.VarChar(100)
  description          String?                @db.Text
  duration             Int?
  listening_test_items listening_test_items[]
}

model listening_test_items {
  listening_test_items_id Int             @id @default(autoincrement())
  listening_test_id       Int?
  question_number         String?         @db.VarChar(100)
  tittle                  String?         @db.VarChar(100)
  description             String?         @db.Text
  content                 String?         @db.Text
  correct_answer          String?         @db.VarChar(60)
  options                 String?         @db.Text
  script                  String?         @db.Text
  topic                   String?         @db.VarChar(100)
  listening_audio         String?         @db.VarChar(100)
  hidden_correct_aswer    Boolean?        @default(true)
  listening_test          listening_test? @relation(fields: [listening_test_id], references: [listening_test_id], onDelete: Cascade, onUpdate: NoAction, map: "listening_test_items_ibfk_1")

  @@index([listening_test_id], map: "listening_test_id")
}

model reading_part_1 {
  reading_part_1_id Int           @id @default(autoincrement())
  reading_test_id   Int?
  title             String?       @db.VarChar(100)
  description       String?       @db.Text
  content           String?       @db.Text
  correct_answer    String?       @db.VarChar(10)
  options           String?       @db.Text
  reading_test      reading_test? @relation(fields: [reading_test_id], references: [reading_test_id], onDelete: Cascade, onUpdate: NoAction, map: "reading_part_1_ibfk_1")

  @@index([reading_test_id], map: "reading_test_id")
}

model reading_part_2 {
  reading_part_2_id Int           @id @default(autoincrement())
  reading_test_id   Int?
  title             String?       @db.VarChar(100)
  name_of_test      String?       @db.VarChar(100)
  description       String?       @db.Text
  content           String?       @db.Text
  sort_order        Int?
  reading_test      reading_test? @relation(fields: [reading_test_id], references: [reading_test_id], onDelete: Cascade, onUpdate: NoAction, map: "reading_part_2_ibfk_1")

  @@index([reading_test_id], map: "reading_test_id")
}

model reading_part_3 {
  reading_part_3_id Int           @id @default(autoincrement())
  reading_test_id   Int?
  title             String?       @db.VarChar(100)
  name_of_test      String?       @db.VarChar(100)
  description       String?       @db.Text
  content           String?       @db.Text
  sort_order        Int?
  reading_test      reading_test? @relation(fields: [reading_test_id], references: [reading_test_id], onDelete: Cascade, onUpdate: NoAction, map: "reading_part_3_ibfk_1")

  @@index([reading_test_id], map: "reading_test_id")
}

model reading_part_4 {
  reading_part_4_id Int           @id @default(autoincrement())
  reading_test_id   Int?
  title             String?       @db.VarChar(100)
  description       String?       @db.Text
  paragraph_text    String?       @db.Text
  content           String?       @db.Text
  correct_answer    String?       @db.VarChar(10)
  options           String?       @db.Text
  reading_test      reading_test? @relation(fields: [reading_test_id], references: [reading_test_id], onDelete: Cascade, onUpdate: NoAction, map: "reading_part_4_ibfk_1")

  @@index([reading_test_id], map: "reading_test_id")
}

model reading_part_5 {
  reading_part_5_id    Int           @id @default(autoincrement())
  reading_test_id      Int?
  title                String?       @db.VarChar(100)
  name_of_test         String?       @db.VarChar(100)
  description          String?       @db.Text
  content              String?       @db.Text
  sort_order           Int?
  hidden_correct_aswer Boolean?      @default(true)
  reading_test         reading_test? @relation(fields: [reading_test_id], references: [reading_test_id], onDelete: Cascade, onUpdate: NoAction, map: "reading_part_5_ibfk_1")

  @@index([reading_test_id], map: "reading_test_id")
}

model reading_test {
  reading_test_id Int              @id @default(autoincrement())
  key_test        String?          @db.VarChar(50)
  tittle          String?          @db.VarChar(100)
  description     String?          @db.Text
  duration        Int?
  reading_part_1  reading_part_1[]
  reading_part_2  reading_part_2[]
  reading_part_3  reading_part_3[]
  reading_part_4  reading_part_4[]
  reading_part_5  reading_part_5[]
}

model writing_tests {
  id          Int                 @id @default(autoincrement())
  key_test    String?             @db.VarChar(50)
  title       String              @db.VarChar(100)
  description String?             @db.Text
  created_at  DateTime            @default(now())
  questions   writing_questions[]
}

model writing_questions {
  id              Int           @id @default(autoincrement())
  writing_test_id Int
  part_number     Int
  question_number Int
  prompt          String        @db.Text
  from_name       String?       @db.VarChar(100)
  word_limit      String?       @db.VarChar(20)
  answer_type     String        @db.VarChar(50)
  note            String?       @db.Text
  created_at      DateTime      @default(now())
  description     String?       @db.Text
  title           String?       @db.VarChar(250)
  writing_test    writing_tests @relation(fields: [writing_test_id], references: [id])

  @@index([writing_test_id])
}

model speaking_tests {
  id          Int                  @id @default(autoincrement())
  key_test    String?              @db.VarChar(50)
  title       String               @db.VarChar(100)
  description String?              @db.Text
  created_at  DateTime             @default(now())
  questions   speaking_questions[]
}

model speaking_questions {
  id               Int            @id @default(autoincrement())
  speaking_test_id Int
  part_number      Int
  question_number  Int
  prompt           String         @db.Text
  image_url        String?        @db.VarChar(255)
  audio_url        String?        @db.VarChar(255)
  suggested_time   Int
  created_at       DateTime       @default(now())
  speaking_test    speaking_tests @relation(fields: [speaking_test_id], references: [id])

  @@index([speaking_test_id])
}

enum users_role {
  admin
  student
  lecturer
}

enum users_status {
  active
  inactive
}
